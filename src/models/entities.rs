// Autogenerated by Thrift Compiler (0.22.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

//
// EntUser
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct EntUser {
  pub username: String,
  pub email: String,
  pub full_name: Option<String>,
  pub bio: Option<String>,
  pub profile_picture_url: Option<String>,
  pub created_time: i64,
  pub last_active_time: Option<i64>,
  pub is_verified: bool,
  pub location: Option<String>,
}

impl EntUser {
  pub fn new<F3, F4, F5, F7, F9>(username: String, email: String, full_name: F3, bio: F4, profile_picture_url: F5, created_time: i64, last_active_time: F7, is_verified: bool, location: F9) -> EntUser where F3: Into<Option<String>>, F4: Into<Option<String>>, F5: Into<Option<String>>, F7: Into<Option<i64>>, F9: Into<Option<String>> {
    EntUser {
      username,
      email,
      full_name: full_name.into(),
      bio: bio.into(),
      profile_picture_url: profile_picture_url.into(),
      created_time,
      last_active_time: last_active_time.into(),
      is_verified,
      location: location.into(),
    }
  }
}

impl TSerializable for EntUser {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EntUser> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<String> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<String> = None;
    let mut f_6: Option<i64> = None;
    let mut f_7: Option<i64> = None;
    let mut f_8: Option<bool> = None;
    let mut f_9: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i64()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_i64()?;
          f_7 = Some(val);
        },
        8 => {
          let val = i_prot.read_bool()?;
          f_8 = Some(val);
        },
        9 => {
          let val = i_prot.read_string()?;
          f_9 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("EntUser.username", &f_1)?;
    verify_required_field_exists("EntUser.email", &f_2)?;
    verify_required_field_exists("EntUser.created_time", &f_6)?;
    verify_required_field_exists("EntUser.is_verified", &f_8)?;
    let ret = EntUser {
      username: f_1.expect("auto-generated code should have checked for presence of required fields"),
      email: f_2.expect("auto-generated code should have checked for presence of required fields"),
      full_name: f_3,
      bio: f_4,
      profile_picture_url: f_5,
      created_time: f_6.expect("auto-generated code should have checked for presence of required fields"),
      last_active_time: f_7,
      is_verified: f_8.expect("auto-generated code should have checked for presence of required fields"),
      location: f_9,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("EntUser");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("username", TType::String, 1))?;
    o_prot.write_string(&self.username)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("email", TType::String, 2))?;
    o_prot.write_string(&self.email)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.full_name {
      o_prot.write_field_begin(&TFieldIdentifier::new("full_name", TType::String, 3))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.bio {
      o_prot.write_field_begin(&TFieldIdentifier::new("bio", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.profile_picture_url {
      o_prot.write_field_begin(&TFieldIdentifier::new("profile_picture_url", TType::String, 5))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("created_time", TType::I64, 6))?;
    o_prot.write_i64(self.created_time)?;
    o_prot.write_field_end()?;
    if let Some(fld_var) = self.last_active_time {
      o_prot.write_field_begin(&TFieldIdentifier::new("last_active_time", TType::I64, 7))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("is_verified", TType::Bool, 8))?;
    o_prot.write_bool(self.is_verified)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.location {
      o_prot.write_field_begin(&TFieldIdentifier::new("location", TType::String, 9))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// EntPost
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct EntPost {
  pub author_id: i64,
  pub content: String,
  pub media_url: Option<String>,
  pub created_time: i64,
  pub updated_time: Option<i64>,
  pub post_type: String,
  pub visibility: Option<String>,
  pub like_count: i32,
  pub comment_count: i32,
  pub share_count: i32,
}

impl EntPost {
  pub fn new<F3, F5, F7>(author_id: i64, content: String, media_url: F3, created_time: i64, updated_time: F5, post_type: String, visibility: F7, like_count: i32, comment_count: i32, share_count: i32) -> EntPost where F3: Into<Option<String>>, F5: Into<Option<i64>>, F7: Into<Option<String>> {
    EntPost {
      author_id,
      content,
      media_url: media_url.into(),
      created_time,
      updated_time: updated_time.into(),
      post_type,
      visibility: visibility.into(),
      like_count,
      comment_count,
      share_count,
    }
  }
}

impl TSerializable for EntPost {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EntPost> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<String> = None;
    let mut f_4: Option<i64> = None;
    let mut f_5: Option<i64> = None;
    let mut f_6: Option<String> = None;
    let mut f_7: Option<String> = None;
    let mut f_8: Option<i32> = None;
    let mut f_9: Option<i32> = None;
    let mut f_10: Option<i32> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i64()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_string()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_string()?;
          f_7 = Some(val);
        },
        8 => {
          let val = i_prot.read_i32()?;
          f_8 = Some(val);
        },
        9 => {
          let val = i_prot.read_i32()?;
          f_9 = Some(val);
        },
        10 => {
          let val = i_prot.read_i32()?;
          f_10 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("EntPost.author_id", &f_1)?;
    verify_required_field_exists("EntPost.content", &f_2)?;
    verify_required_field_exists("EntPost.created_time", &f_4)?;
    verify_required_field_exists("EntPost.post_type", &f_6)?;
    verify_required_field_exists("EntPost.like_count", &f_8)?;
    verify_required_field_exists("EntPost.comment_count", &f_9)?;
    verify_required_field_exists("EntPost.share_count", &f_10)?;
    let ret = EntPost {
      author_id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      content: f_2.expect("auto-generated code should have checked for presence of required fields"),
      media_url: f_3,
      created_time: f_4.expect("auto-generated code should have checked for presence of required fields"),
      updated_time: f_5,
      post_type: f_6.expect("auto-generated code should have checked for presence of required fields"),
      visibility: f_7,
      like_count: f_8.expect("auto-generated code should have checked for presence of required fields"),
      comment_count: f_9.expect("auto-generated code should have checked for presence of required fields"),
      share_count: f_10.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("EntPost");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("author_id", TType::I64, 1))?;
    o_prot.write_i64(self.author_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("content", TType::String, 2))?;
    o_prot.write_string(&self.content)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.media_url {
      o_prot.write_field_begin(&TFieldIdentifier::new("media_url", TType::String, 3))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("created_time", TType::I64, 4))?;
    o_prot.write_i64(self.created_time)?;
    o_prot.write_field_end()?;
    if let Some(fld_var) = self.updated_time {
      o_prot.write_field_begin(&TFieldIdentifier::new("updated_time", TType::I64, 5))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("post_type", TType::String, 6))?;
    o_prot.write_string(&self.post_type)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.visibility {
      o_prot.write_field_begin(&TFieldIdentifier::new("visibility", TType::String, 7))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("like_count", TType::I32, 8))?;
    o_prot.write_i32(self.like_count)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("comment_count", TType::I32, 9))?;
    o_prot.write_i32(self.comment_count)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("share_count", TType::I32, 10))?;
    o_prot.write_i32(self.share_count)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// EntComment
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct EntComment {
  pub post_id: i64,
  pub author_id: i64,
  pub content: String,
  pub created_time: i64,
  pub updated_time: Option<i64>,
  pub parent_comment_id: Option<i64>,
  pub like_count: i32,
}

impl EntComment {
  pub fn new<F5, F6>(post_id: i64, author_id: i64, content: String, created_time: i64, updated_time: F5, parent_comment_id: F6, like_count: i32) -> EntComment where F5: Into<Option<i64>>, F6: Into<Option<i64>> {
    EntComment {
      post_id,
      author_id,
      content,
      created_time,
      updated_time: updated_time.into(),
      parent_comment_id: parent_comment_id.into(),
      like_count,
    }
  }
}

impl TSerializable for EntComment {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EntComment> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<String> = None;
    let mut f_4: Option<i64> = None;
    let mut f_5: Option<i64> = None;
    let mut f_6: Option<i64> = None;
    let mut f_7: Option<i32> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i64()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i64()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_i32()?;
          f_7 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("EntComment.post_id", &f_1)?;
    verify_required_field_exists("EntComment.author_id", &f_2)?;
    verify_required_field_exists("EntComment.content", &f_3)?;
    verify_required_field_exists("EntComment.created_time", &f_4)?;
    verify_required_field_exists("EntComment.like_count", &f_7)?;
    let ret = EntComment {
      post_id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      author_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      content: f_3.expect("auto-generated code should have checked for presence of required fields"),
      created_time: f_4.expect("auto-generated code should have checked for presence of required fields"),
      updated_time: f_5,
      parent_comment_id: f_6,
      like_count: f_7.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("EntComment");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("post_id", TType::I64, 1))?;
    o_prot.write_i64(self.post_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("author_id", TType::I64, 2))?;
    o_prot.write_i64(self.author_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("content", TType::String, 3))?;
    o_prot.write_string(&self.content)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("created_time", TType::I64, 4))?;
    o_prot.write_i64(self.created_time)?;
    o_prot.write_field_end()?;
    if let Some(fld_var) = self.updated_time {
      o_prot.write_field_begin(&TFieldIdentifier::new("updated_time", TType::I64, 5))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.parent_comment_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("parent_comment_id", TType::I64, 6))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("like_count", TType::I32, 7))?;
    o_prot.write_i32(self.like_count)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// EntGroup
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct EntGroup {
  pub name: String,
  pub description: Option<String>,
  pub created_time: i64,
  pub creator_id: i64,
  pub privacy: String,
  pub member_count: i32,
  pub cover_photo_url: Option<String>,
}

impl EntGroup {
  pub fn new<F2, F7>(name: String, description: F2, created_time: i64, creator_id: i64, privacy: String, member_count: i32, cover_photo_url: F7) -> EntGroup where F2: Into<Option<String>>, F7: Into<Option<String>> {
    EntGroup {
      name,
      description: description.into(),
      created_time,
      creator_id,
      privacy,
      member_count,
      cover_photo_url: cover_photo_url.into(),
    }
  }
}

impl TSerializable for EntGroup {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EntGroup> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<i64> = None;
    let mut f_4: Option<i64> = None;
    let mut f_5: Option<String> = None;
    let mut f_6: Option<i32> = None;
    let mut f_7: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i64()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i32()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_string()?;
          f_7 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("EntGroup.name", &f_1)?;
    verify_required_field_exists("EntGroup.created_time", &f_3)?;
    verify_required_field_exists("EntGroup.creator_id", &f_4)?;
    verify_required_field_exists("EntGroup.privacy", &f_5)?;
    verify_required_field_exists("EntGroup.member_count", &f_6)?;
    let ret = EntGroup {
      name: f_1.expect("auto-generated code should have checked for presence of required fields"),
      description: f_2,
      created_time: f_3.expect("auto-generated code should have checked for presence of required fields"),
      creator_id: f_4.expect("auto-generated code should have checked for presence of required fields"),
      privacy: f_5.expect("auto-generated code should have checked for presence of required fields"),
      member_count: f_6.expect("auto-generated code should have checked for presence of required fields"),
      cover_photo_url: f_7,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("EntGroup");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("name", TType::String, 1))?;
    o_prot.write_string(&self.name)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.description {
      o_prot.write_field_begin(&TFieldIdentifier::new("description", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("created_time", TType::I64, 3))?;
    o_prot.write_i64(self.created_time)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("creator_id", TType::I64, 4))?;
    o_prot.write_i64(self.creator_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("privacy", TType::String, 5))?;
    o_prot.write_string(&self.privacy)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("member_count", TType::I32, 6))?;
    o_prot.write_i32(self.member_count)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.cover_photo_url {
      o_prot.write_field_begin(&TFieldIdentifier::new("cover_photo_url", TType::String, 7))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// EntPage
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct EntPage {
  pub name: String,
  pub description: Option<String>,
  pub category: String,
  pub created_time: i64,
  pub website: Option<String>,
  pub follower_count: i32,
  pub profile_picture_url: Option<String>,
  pub is_verified: bool,
}

impl EntPage {
  pub fn new<F2, F5, F7>(name: String, description: F2, category: String, created_time: i64, website: F5, follower_count: i32, profile_picture_url: F7, is_verified: bool) -> EntPage where F2: Into<Option<String>>, F5: Into<Option<String>>, F7: Into<Option<String>> {
    EntPage {
      name,
      description: description.into(),
      category,
      created_time,
      website: website.into(),
      follower_count,
      profile_picture_url: profile_picture_url.into(),
      is_verified,
    }
  }
}

impl TSerializable for EntPage {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EntPage> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<String> = None;
    let mut f_4: Option<i64> = None;
    let mut f_5: Option<String> = None;
    let mut f_6: Option<i32> = None;
    let mut f_7: Option<String> = None;
    let mut f_8: Option<bool> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i32()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_string()?;
          f_7 = Some(val);
        },
        8 => {
          let val = i_prot.read_bool()?;
          f_8 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("EntPage.name", &f_1)?;
    verify_required_field_exists("EntPage.category", &f_3)?;
    verify_required_field_exists("EntPage.created_time", &f_4)?;
    verify_required_field_exists("EntPage.follower_count", &f_6)?;
    verify_required_field_exists("EntPage.is_verified", &f_8)?;
    let ret = EntPage {
      name: f_1.expect("auto-generated code should have checked for presence of required fields"),
      description: f_2,
      category: f_3.expect("auto-generated code should have checked for presence of required fields"),
      created_time: f_4.expect("auto-generated code should have checked for presence of required fields"),
      website: f_5,
      follower_count: f_6.expect("auto-generated code should have checked for presence of required fields"),
      profile_picture_url: f_7,
      is_verified: f_8.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("EntPage");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("name", TType::String, 1))?;
    o_prot.write_string(&self.name)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.description {
      o_prot.write_field_begin(&TFieldIdentifier::new("description", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("category", TType::String, 3))?;
    o_prot.write_string(&self.category)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("created_time", TType::I64, 4))?;
    o_prot.write_i64(self.created_time)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.website {
      o_prot.write_field_begin(&TFieldIdentifier::new("website", TType::String, 5))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("follower_count", TType::I32, 6))?;
    o_prot.write_i32(self.follower_count)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.profile_picture_url {
      o_prot.write_field_begin(&TFieldIdentifier::new("profile_picture_url", TType::String, 7))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("is_verified", TType::Bool, 8))?;
    o_prot.write_bool(self.is_verified)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

