// Autogenerated by Thrift Compiler (0.22.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

//
// EntPage
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct EntPage {
  pub name: String,
  pub description: Option<String>,
  pub category: String,
  pub created_time: i64,
  pub website: Option<String>,
  pub follower_count: i32,
  pub profile_picture_url: Option<String>,
  pub is_verified: bool,
}

impl EntPage {
  pub fn new<F2, F5, F7>(name: String, description: F2, category: String, created_time: i64, website: F5, follower_count: i32, profile_picture_url: F7, is_verified: bool) -> EntPage where F2: Into<Option<String>>, F5: Into<Option<String>>, F7: Into<Option<String>> {
    EntPage {
      name,
      description: description.into(),
      category,
      created_time,
      website: website.into(),
      follower_count,
      profile_picture_url: profile_picture_url.into(),
      is_verified,
    }
  }
}

impl TSerializable for EntPage {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EntPage> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<String> = None;
    let mut f_4: Option<i64> = None;
    let mut f_5: Option<String> = None;
    let mut f_6: Option<i32> = None;
    let mut f_7: Option<String> = None;
    let mut f_8: Option<bool> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i32()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_string()?;
          f_7 = Some(val);
        },
        8 => {
          let val = i_prot.read_bool()?;
          f_8 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("EntPage.name", &f_1)?;
    verify_required_field_exists("EntPage.category", &f_3)?;
    verify_required_field_exists("EntPage.created_time", &f_4)?;
    verify_required_field_exists("EntPage.follower_count", &f_6)?;
    verify_required_field_exists("EntPage.is_verified", &f_8)?;
    let ret = EntPage {
      name: f_1.expect("auto-generated code should have checked for presence of required fields"),
      description: f_2,
      category: f_3.expect("auto-generated code should have checked for presence of required fields"),
      created_time: f_4.expect("auto-generated code should have checked for presence of required fields"),
      website: f_5,
      follower_count: f_6.expect("auto-generated code should have checked for presence of required fields"),
      profile_picture_url: f_7,
      is_verified: f_8.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("EntPage");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("name", TType::String, 1))?;
    o_prot.write_string(&self.name)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.description {
      o_prot.write_field_begin(&TFieldIdentifier::new("description", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("category", TType::String, 3))?;
    o_prot.write_string(&self.category)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("created_time", TType::I64, 4))?;
    o_prot.write_i64(self.created_time)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.website {
      o_prot.write_field_begin(&TFieldIdentifier::new("website", TType::String, 5))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("follower_count", TType::I32, 6))?;
    o_prot.write_i32(self.follower_count)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.profile_picture_url {
      o_prot.write_field_begin(&TFieldIdentifier::new("profile_picture_url", TType::String, 7))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("is_verified", TType::Bool, 8))?;
    o_prot.write_bool(self.is_verified)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

