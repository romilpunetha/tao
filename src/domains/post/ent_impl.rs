// Generated Ent trait implementation for EntPost
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use std::sync::Arc;
use crate::framework::entity::ent_trait::Entity;
use crate::error::AppResult;
use super::entity::EntPost;
use crate::infrastructure::tao_core::tao_core::{TaoOperations, TaoObject};
use crate::infrastructure::tao_core::tao::Tao;
use thrift::protocol::{TCompactInputProtocol, TSerializable};
use crate::infrastructure::global_tao::get_global_tao;
use std::io::Cursor;
use regex;
use crate::domains::page::EntPage;
use crate::domains::user::EntUser;
use crate::domains::group::EntGroup;
use crate::domains::event::EntEvent;
use crate::domains::comment::EntComment;

impl Entity for EntPost {
    const ENTITY_TYPE: &'static str = "ent_post";
    
    fn id(&self) -> i64 {
        self.id
    }

    fn validate(&self) -> AppResult<Vec<String>> {
        let mut errors = Vec::new();
        
        
        // Validate content (required)
        if self.content.trim().is_empty() {
            errors.push("content cannot be empty".to_string());
        }
        // Validate content min length
        if self.content.len() < 1 {
            errors.push("content must be at least 1 characters".to_string());
        }
        // Validate content max length
        if self.content.len() > 10000 {
            errors.push("content cannot exceed 10000 characters".to_string());
        }
        
        
        
        // Validate post type (required)
        if self.post_type.trim().is_empty() {
            errors.push("post type cannot be empty".to_string());
        }
        
        
        
        
        
        
        
        Ok(errors)
    }
}

impl EntPost {
    /// Create an entity from a TaoObject
    pub(crate) async fn from_tao_object(tao_obj: TaoObject) -> AppResult<Option<EntPost>> {
        if tao_obj.otype != EntPost::ENTITY_TYPE {
            return Ok(None);
        }
        
        let mut cursor = Cursor::new(&tao_obj.data);
        let mut protocol = TCompactInputProtocol::new(&mut cursor);
        let mut entity = EntPost::read_from_in_protocol(&mut protocol)
            .map_err(|e| crate::error::AppError::SerializationError(e.to_string()))?;
        
        Ok(Some(entity))
    }

    // Edge traversal methods
    
    /// Get author via TAO edge traversal
    pub async fn get_author(&self) -> AppResult<Vec<EntUser>> {
        let tao = get_global_tao()?.clone();
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "author".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntUser::from_tao_object(tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count author via TAO edge traversal
    pub async fn count_author(&self) -> AppResult<i64> {
        let tao = get_global_tao()?.clone();
        let count = tao.assoc_count(self.id(), "author".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Get comments via TAO edge traversal
    pub async fn get_comments(&self) -> AppResult<Vec<EntComment>> {
        let tao = get_global_tao()?.clone();
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "comments".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntComment::from_tao_object(tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count comments via TAO edge traversal
    pub async fn count_comments(&self) -> AppResult<i64> {
        let tao = get_global_tao()?.clone();
        let count = tao.assoc_count(self.id(), "comments".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Get liked by via TAO edge traversal
    pub async fn get_liked_by(&self) -> AppResult<Vec<EntUser>> {
        let tao = get_global_tao()?.clone();
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "liked_by".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntUser::from_tao_object(tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count liked by via TAO edge traversal
    pub async fn count_liked_by(&self) -> AppResult<i64> {
        let tao = get_global_tao()?.clone();
        let count = tao.assoc_count(self.id(), "liked_by".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Get mentioned users via TAO edge traversal
    pub async fn get_mentioned_users(&self) -> AppResult<Vec<EntUser>> {
        let tao = get_global_tao()?.clone();
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "mentioned_users".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntUser::from_tao_object(tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count mentioned users via TAO edge traversal
    pub async fn count_mentioned_users(&self) -> AppResult<i64> {
        let tao = get_global_tao()?.clone();
        let count = tao.assoc_count(self.id(), "mentioned_users".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Get appears on pages via TAO edge traversal
    pub async fn get_appears_on_pages(&self) -> AppResult<Vec<EntPage>> {
        let tao = get_global_tao()?.clone();
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "appears_on_pages".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntPage::from_tao_object(tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count appears on pages via TAO edge traversal
    pub async fn count_appears_on_pages(&self) -> AppResult<i64> {
        let tao = get_global_tao()?.clone();
        let count = tao.assoc_count(self.id(), "appears_on_pages".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Add appears on page association via TAO
    pub async fn add_appears_on_page(&self, target_id: i64) -> AppResult<()> {
        let tao = get_global_tao()?.clone();
        // Fetch the EntPage to ensure it exists before creating an association
        let _appears_on_page = EntPage::from_tao_object(
            tao.obj_get(target_id).await?
                .ok_or_else(|| crate::error::AppError::NotFound(format!("EntPage with id {} not found", target_id)))?
        ).await?;

        let assoc = crate::infrastructure::tao_core::tao_core::create_tao_association(self.id(), "appears_on_pages".to_string(), target_id, None);
        tao.assoc_add(assoc).await?;
        Ok(())
    }
    
    /// Remove appears on page association via TAO
    pub async fn remove_appears_on_page(&self, target_id: i64) -> AppResult<bool> {
        let tao = get_global_tao()?.clone();
        tao.assoc_delete(self.id(), "appears_on_pages".to_string(), target_id).await
    }
    
    /// Get shared in groups via TAO edge traversal
    pub async fn get_shared_in_groups(&self) -> AppResult<Vec<EntGroup>> {
        let tao = get_global_tao()?.clone();
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "shared_in_groups".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntGroup::from_tao_object(tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count shared in groups via TAO edge traversal
    pub async fn count_shared_in_groups(&self) -> AppResult<i64> {
        let tao = get_global_tao()?.clone();
        let count = tao.assoc_count(self.id(), "shared_in_groups".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Add shared in group association via TAO
    pub async fn add_shared_in_group(&self, target_id: i64) -> AppResult<()> {
        let tao = get_global_tao()?.clone();
        // Fetch the EntGroup to ensure it exists before creating an association
        let _shared_in_group = EntGroup::from_tao_object(
            tao.obj_get(target_id).await?
                .ok_or_else(|| crate::error::AppError::NotFound(format!("EntGroup with id {} not found", target_id)))?
        ).await?;

        let assoc = crate::infrastructure::tao_core::tao_core::create_tao_association(self.id(), "shared_in_groups".to_string(), target_id, None);
        tao.assoc_add(assoc).await?;
        Ok(())
    }
    
    /// Remove shared in group association via TAO
    pub async fn remove_shared_in_group(&self, target_id: i64) -> AppResult<bool> {
        let tao = get_global_tao()?.clone();
        tao.assoc_delete(self.id(), "shared_in_groups".to_string(), target_id).await
    }
    
    /// Get related events via TAO edge traversal
    pub async fn get_related_events(&self) -> AppResult<Vec<EntEvent>> {
        let tao = get_global_tao()?.clone();
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "related_events".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntEvent::from_tao_object(tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count related events via TAO edge traversal
    pub async fn count_related_events(&self) -> AppResult<i64> {
        let tao = get_global_tao()?.clone();
        let count = tao.assoc_count(self.id(), "related_events".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Add related event association via TAO
    pub async fn add_related_event(&self, target_id: i64) -> AppResult<()> {
        let tao = get_global_tao()?.clone();
        // Fetch the EntEvent to ensure it exists before creating an association
        let _related_event = EntEvent::from_tao_object(
            tao.obj_get(target_id).await?
                .ok_or_else(|| crate::error::AppError::NotFound(format!("EntEvent with id {} not found", target_id)))?
        ).await?;

        let assoc = crate::infrastructure::tao_core::tao_core::create_tao_association(self.id(), "related_events".to_string(), target_id, None);
        tao.assoc_add(assoc).await?;
        Ok(())
    }
    
    /// Remove related event association via TAO
    pub async fn remove_related_event(&self, target_id: i64) -> AppResult<bool> {
        let tao = get_global_tao()?.clone();
        tao.assoc_delete(self.id(), "related_events".to_string(), target_id).await
    }
    
}

