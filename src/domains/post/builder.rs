// Generated Unified Builder pattern implementation for EntPost
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use super::entity::EntPost;
use crate::error::AppResult;
use crate::framework::builder::ent_builder::EntBuilder;
use crate::infrastructure::global_tao::get_global_tao;
use crate::infrastructure::tao_core::tao_core::current_time_millis;
use crate::infrastructure::tao_core::tao_core::TaoEntityBuilder;

#[derive(Debug, Default)]
pub struct EntPostBuilderState {
    author_id: Option<i64>,
    content: Option<String>,
    media_url: Option<String>,
    created_time: Option<i64>,
    updated_time: Option<i64>,
    post_type: Option<String>,
    visibility: Option<String>,
    like_count: Option<i32>,
    comment_count: Option<i32>,
    share_count: Option<i32>,
    tags: Option<String>,
    mentions: Option<String>,
}

impl EntPostBuilderState {
    pub fn author_id(mut self, author_id: i64) -> Self {
        self.author_id = Some(author_id);
        self
    }

    pub fn content(mut self, content: String) -> Self {
        self.content = Some(content);
        self
    }

    pub fn media_url(mut self, media_url: String) -> Self {
        self.media_url = Some(media_url);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    pub fn updated_time(mut self, updated_time: i64) -> Self {
        self.updated_time = Some(updated_time);
        self
    }

    pub fn post_type(mut self, post_type: String) -> Self {
        self.post_type = Some(post_type);
        self
    }

    pub fn visibility(mut self, visibility: String) -> Self {
        self.visibility = Some(visibility);
        self
    }

    pub fn like_count(mut self, like_count: i32) -> Self {
        self.like_count = Some(like_count);
        self
    }

    pub fn comment_count(mut self, comment_count: i32) -> Self {
        self.comment_count = Some(comment_count);
        self
    }

    pub fn share_count(mut self, share_count: i32) -> Self {
        self.share_count = Some(share_count);
        self
    }

    pub fn tags(mut self, tags: String) -> Self {
        self.tags = Some(tags);
        self
    }

    pub fn mentions(mut self, mentions: String) -> Self {
        self.mentions = Some(mentions);
        self
    }

    /// Save the entity to database via TAO
    pub async fn savex(self) -> AppResult<EntPost> {
        let tao = get_global_tao()?.clone();
        tao.create_entity::<EntPost>(self).await
    }
}

impl EntBuilder for EntPost {
    type BuilderState = EntPostBuilderState;

    fn build(state: Self::BuilderState, id: i64) -> Result<Self, String> {
        let current_time = current_time_millis();

        Ok(EntPost {
            id,
            author_id: state
                .author_id
                .ok_or_else(|| "Required field 'author_id' not provided".to_string())?,
            content: state
                .content
                .ok_or_else(|| "Required field 'content' not provided".to_string())?,
            media_url: state.media_url,
            created_time: current_time,
            updated_time: Some(current_time),
            post_type: state
                .post_type
                .ok_or_else(|| "Required field 'post_type' not provided".to_string())?,
            visibility: state.visibility,
            like_count: state
                .like_count
                .ok_or_else(|| "Required field 'like_count' not provided".to_string())?,
            comment_count: state
                .comment_count
                .ok_or_else(|| "Required field 'comment_count' not provided".to_string())?,
            share_count: state
                .share_count
                .ok_or_else(|| "Required field 'share_count' not provided".to_string())?,
            tags: state.tags,
            mentions: state.mentions,
        })
    }

    fn entity_type() -> &'static str {
        "ent_post"
    }
}

impl EntPost {
    /// Create a new entity builder state
    pub fn create() -> EntPostBuilderState {
        EntPostBuilderState::default()
    }
}
