// Generated Ent trait implementation for EntPage
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use std::sync::Arc;
use crate::ent_framework::Entity;
use crate::error::AppResult;
use super::entity::EntPage;
use crate::infrastructure::tao_core::{TaoOperations, TaoObject};
use crate::infrastructure::tao::Tao;
use thrift::protocol::{TCompactInputProtocol, TSerializable};
use std::io::Cursor;
use regex;
use crate::domains::post::EntPost;
use crate::domains::user::EntUser;

impl Entity for EntPage {
    const ENTITY_TYPE: &'static str = "ent_page";
    
    fn id(&self) -> i64 {
        self.id
    }

    fn validate(&self) -> AppResult<Vec<String>> {
        let mut errors = Vec::new();
        
        // Validate name (required)
        if self.name.trim().is_empty() {
            errors.push("name cannot be empty".to_string());
        }
        
        
        Ok(errors)
    }
}

impl EntPage {
    /// Create an entity from a TaoObject
    pub async fn from_tao_object(tao: &Tao, tao_obj: TaoObject) -> AppResult<Option<EntPage>> {
        if tao_obj.otype != EntPage::ENTITY_TYPE {
            return Ok(None);
        }
        
        let mut cursor = Cursor::new(&tao_obj.data);
        let mut protocol = TCompactInputProtocol::new(&mut cursor);
        let mut entity = EntPage::read_from_in_protocol(&mut protocol)
            .map_err(|e| crate::error::AppError::SerializationError(e.to_string()))?;
        
        // Update ID from TaoObject
        entity.id = tao_obj.id;
        
        Ok(Some(entity))
    }

    // Edge traversal methods
    
    /// Get followers via TAO edge traversal
    pub async fn get_followers(&self, tao: &Tao) -> AppResult<Vec<EntUser>> {
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "followers".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntUser::from_tao_object(tao, tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count followers via TAO edge traversal
    pub async fn count_followers(&self, tao: &Tao) -> AppResult<i64> {
        let count = tao.assoc_count(self.id(), "followers".to_string()).await?;
        Ok(count as i64)
    }
    
    /// Get posts via TAO edge traversal
    pub async fn get_posts(&self, tao: &Tao) -> AppResult<Vec<EntPost>> {
        let neighbor_ids = tao.get_neighbor_ids(self.id(), "posts".to_string(), Some(100)).await?;

        let mut results = Vec::new();
        for id in neighbor_ids {
            if let Some(tao_obj) = tao.obj_get(id).await? {
                if let Some(entity) = EntPost::from_tao_object(tao, tao_obj).await? {
                    results.push(entity);
                }
            }
        }
        
        Ok(results)
    }
    
    /// Count posts via TAO edge traversal
    pub async fn count_posts(&self, tao: &Tao) -> AppResult<i64> {
        let count = tao.assoc_count(self.id(), "posts".to_string()).await?;
        Ok(count as i64)
    }
    
}

