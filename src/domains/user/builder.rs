// Generated Unified Builder pattern implementation for EntUser
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use crate::framework::entity::ent_trait::Entity;
use crate::framework::builder::ent_builder::EntBuilder;
use crate::framework::builder::has_tao::HasTao;
use crate::infrastructure::viewer::viewer::ViewerContext;
use crate::infrastructure::tao_core::tao_core::{TaoEntityBuilder, TaoOperations};
use crate::infrastructure::tao_core::tao_core::current_time_millis;
use crate::error::{AppResult, AppError};
use super::entity::EntUser;
use std::sync::Arc;

#[derive(Debug, Default)]
pub struct EntUserBuilderState {
    username: Option<String>,
    email: Option<String>,
    created_time: Option<i64>,
    full_name: Option<String>,
    bio: Option<String>,
    profile_picture_url: Option<String>,
    last_active_time: Option<i64>,
    is_verified: Option<bool>,
    location: Option<String>,
    privacy_settings: Option<String>,
    pub(crate) tao: Option<Arc<dyn TaoOperations>>,
}

impl EntUserBuilderState {
    pub fn username(mut self, username: String) -> Self {
        self.username = Some(username);
        self
    }

    pub fn email(mut self, email: String) -> Self {
        self.email = Some(email);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    pub fn full_name(mut self, full_name: String) -> Self {
        self.full_name = Some(full_name);
        self
    }

    pub fn bio(mut self, bio: String) -> Self {
        self.bio = Some(bio);
        self
    }

    pub fn profile_picture_url(mut self, profile_picture_url: String) -> Self {
        self.profile_picture_url = Some(profile_picture_url);
        self
    }

    pub fn last_active_time(mut self, last_active_time: i64) -> Self {
        self.last_active_time = Some(last_active_time);
        self
    }

    pub fn is_verified(mut self, is_verified: bool) -> Self {
        self.is_verified = Some(is_verified);
        self
    }

    pub fn location(mut self, location: String) -> Self {
        self.location = Some(location);
        self
    }

    pub fn privacy_settings(mut self, privacy_settings: String) -> Self {
        self.privacy_settings = Some(privacy_settings);
        self
    }

    /// Save the entity to database via TAO
    pub async fn savex(self) -> AppResult<EntUser> {
        let tao = self.get_tao().ok_or_else(|| AppError::Internal("Tao instance not provided to builder".to_string()))?;
        tao.create_entity::<EntUser>(self).await
    }

}

impl EntBuilder for EntUser {
    type BuilderState = EntUserBuilderState;

    fn build(state: Self::BuilderState, id: i64) -> Result<Self, String> {
        let current_time = current_time_millis();

        Ok(EntUser {
            id,
            username: state.username.ok_or_else(|| 
                "Required field 'username' not provided".to_string()
            )?,
            email: state.email.ok_or_else(|| 
                "Required field 'email' not provided".to_string()
            )?,
            created_time: current_time,
            full_name: state.full_name,
            bio: state.bio,
            profile_picture_url: state.profile_picture_url,
            last_active_time: state.last_active_time,
            is_verified: state.is_verified.ok_or_else(|| 
                "Required field 'is_verified' not provided".to_string()
            )?,
            location: state.location,
            privacy_settings: state.privacy_settings,
        })
    }

    fn entity_type() -> &'static str {
        "ent_user"
    }
}

impl HasTao for EntUserBuilderState {
    fn get_tao(&self) -> Option<Arc<dyn TaoOperations>> {
        self.tao.clone()
    }

    fn set_tao(&mut self, tao: Arc<dyn TaoOperations>) {
        self.tao = Some(tao);
    }
}

impl EntUser {
    /// Create a new entity builder state (Meta's pattern: EntUser::create(vc))
    pub fn create(vc: Arc<ViewerContext>) -> EntUserBuilderState {
        let mut builder = EntUserBuilderState::default();
        // Extract TAO from viewer context following Meta's pattern
        builder.set_tao(Arc::clone(&vc.tao));
        builder
    }
}

