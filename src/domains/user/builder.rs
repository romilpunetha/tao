// Generated Builder pattern implementation for EntUser
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use crate::ent_framework::ent_builder::EntBuilder;
use crate::ent_framework::Entity;
use crate::infrastructure::tao::{current_time_millis, Tao};
use crate::infrastructure::tao_core::TaoOperations;
use crate::error::AppResult;
use super::entity::EntUser;
use thrift::protocol::TSerializable;
use thrift::protocol::TCompactOutputProtocol; // Added for serialization
use std::io::Cursor; // Added for serialization
use crate::infrastructure::global_tao::get_global_tao; // Import global_tao
use async_trait::async_trait;

#[derive(Debug, Default)]
pub struct EntUserBuilder {
    id: Option<i64>,
    username: Option<String>,
    email: Option<String>,
    created_time: Option<i64>,
    full_name: Option<String>,
    bio: Option<String>,
    profile_picture_url: Option<String>,
    last_active_time: Option<i64>,
    is_verified: Option<bool>,
    location: Option<String>,
    privacy_settings: Option<String>,
}

impl EntUserBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn username(mut self, username: String) -> Self {
        self.username = Some(username);
        self
    }

    pub fn email(mut self, email: String) -> Self {
        self.email = Some(email);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    pub fn full_name(mut self, full_name: String) -> Self {
        self.full_name = Some(full_name);
        self
    }

    pub fn bio(mut self, bio: String) -> Self {
        self.bio = Some(bio);
        self
    }

    pub fn profile_picture_url(mut self, profile_picture_url: String) -> Self {
        self.profile_picture_url = Some(profile_picture_url);
        self
    }

    pub fn last_active_time(mut self, last_active_time: i64) -> Self {
        self.last_active_time = Some(last_active_time);
        self
    }

    pub fn is_verified(mut self, is_verified: bool) -> Self {
        self.is_verified = Some(is_verified);
        self
    }

    pub fn location(mut self, location: String) -> Self {
        self.location = Some(location);
        self
    }

    pub fn privacy_settings(mut self, privacy_settings: String) -> Self {
        self.privacy_settings = Some(privacy_settings);
        self
    }

    /// Build the entity without saving to database
    pub fn build(self, id: i64) -> Result<EntUser, String> {
        let current_time = current_time_millis();

        let entity = EntUser {
            id,
            username: self.username.ok_or_else(|| 
                "Required field 'username' not provided".to_string()
            )?,
            email: self.email.ok_or_else(|| 
                "Required field 'email' not provided".to_string()
            )?,
            created_time: current_time,
            full_name: self.full_name,
            bio: self.bio,
            profile_picture_url: self.profile_picture_url,
            last_active_time: self.last_active_time,
            is_verified: self.is_verified.ok_or_else(|| 
                "Required field 'is_verified' not provided".to_string()
            )?,
            location: self.location,
            privacy_settings: self.privacy_settings,
        };

        Ok(entity)
    }

    /// Save the entity to database via TAO
    pub async fn savex(self) -> AppResult<EntUser> {
        let tao = get_global_tao()?.clone();
        tao.create(self, None).await
    }

}

#[async_trait]
impl EntBuilder for EntUserBuilder {
    type EntityType = EntUser;

    fn build(self, id: i64) -> Result<Self::EntityType, String> {
        let current_time = current_time_millis();

        let entity = EntUser {
            id,
            username: self.username.ok_or_else(|| 
                "Required field 'username' not provided".to_string()
            )?,
            email: self.email.ok_or_else(|| 
                "Required field 'email' not provided".to_string()
            )?,
            created_time: current_time,
            full_name: self.full_name,
            bio: self.bio,
            profile_picture_url: self.profile_picture_url,
            last_active_time: self.last_active_time,
            is_verified: self.is_verified.ok_or_else(|| 
                "Required field 'is_verified' not provided".to_string()
            )?,
            location: self.location,
            privacy_settings: self.privacy_settings,
        };

        Ok(entity)
    }

    fn entity_type() -> &'static str {
        "ent_user"
    }
}

impl EntUser {
    /// Create a new entity builder
    pub fn create() -> EntUserBuilder {
        EntUserBuilder::new()
    }
}

