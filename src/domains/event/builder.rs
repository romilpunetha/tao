// Generated Builder pattern implementation for EntEvent
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use crate::ent_framework::ent_builder::EntBuilder;
use crate::ent_framework::Entity;
use crate::infrastructure::tao::{current_time_millis, Tao};
use crate::infrastructure::tao_core::TaoOperations;
use crate::error::AppResult;
use super::entity::EntEvent;
use thrift::protocol::TSerializable;
use thrift::protocol::TCompactOutputProtocol; // Added for serialization
use std::io::Cursor; // Added for serialization
use crate::infrastructure::global_tao::get_global_tao; // Import global_tao
use async_trait::async_trait;

#[derive(Debug, Default)]
pub struct EntEventBuilder {
    id: Option<i64>,
    name: Option<String>,
    description: Option<String>,
    event_time: Option<i64>,
    created_time: Option<i64>,
}

impl EntEventBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn name(mut self, name: String) -> Self {
        self.name = Some(name);
        self
    }

    pub fn description(mut self, description: String) -> Self {
        self.description = Some(description);
        self
    }

    pub fn event_time(mut self, event_time: i64) -> Self {
        self.event_time = Some(event_time);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    /// Build the entity without saving to database
    pub fn build(self, id: i64) -> Result<EntEvent, String> {
        let current_time = current_time_millis();

        let entity = EntEvent {
            id,
            name: self.name.ok_or_else(|| 
                "Required field 'name' not provided".to_string()
            )?,
            description: self.description,
            event_time: self.event_time.ok_or_else(|| 
                "Required field 'event_time' not provided".to_string()
            )?,
            created_time: current_time,
        };

        Ok(entity)
    }

    /// Save the entity to database via TAO
    pub async fn savex(self) -> AppResult<EntEvent> {
        let tao = get_global_tao()?.clone();
        tao.create(self, None).await
    }

}

#[async_trait]
impl EntBuilder for EntEventBuilder {
    type EntityType = EntEvent;

    fn build(self, id: i64) -> Result<Self::EntityType, String> {
        let current_time = current_time_millis();

        let entity = EntEvent {
            id,
            name: self.name.ok_or_else(|| 
                "Required field 'name' not provided".to_string()
            )?,
            description: self.description,
            event_time: self.event_time.ok_or_else(|| 
                "Required field 'event_time' not provided".to_string()
            )?,
            created_time: current_time,
        };

        Ok(entity)
    }

    fn entity_type() -> &'static str {
        "ent_event"
    }
}

impl EntEvent {
    /// Create a new entity builder
    pub fn create() -> EntEventBuilder {
        EntEventBuilder::new()
    }
}

