// Generated Builder pattern implementation for EntGroup
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use crate::ent_framework::Entity;
use crate::infrastructure::tao::{current_time_millis, Tao};
use crate::infrastructure::tao_core::TaoOperations;
use crate::error::AppResult;
use super::entity::EntGroup;
use thrift::protocol::TSerializable;
use thrift::protocol::TCompactOutputProtocol; // Added for serialization
use std::io::Cursor; // Added for serialization

#[derive(Debug, Default)]
pub struct EntGroupBuilder {
    name: Option<String>,
    description: Option<String>,
    created_time: Option<i64>,
}

impl EntGroupBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn name(mut self, name: String) -> Self {
        self.name = Some(name);
        self
    }

    pub fn description(mut self, description: String) -> Self {
        self.description = Some(description);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    /// Save the entity to database via TAO
    pub async fn save(self, tao: &Tao) -> AppResult<EntGroup> {
        let current_time = current_time_millis();

        let entity = EntGroup {
            id: 0, // TAO will generate the actual ID
            name: self.name.ok_or_else(|| crate::error::AppError::Validation(
                "Required field 'name' not provided".to_string()
            ))?,
            description: self.description,
            created_time: current_time,
        };

        // Validate entity before saving
        let validation_errors = entity.validate()?;
        if !validation_errors.is_empty() {
            return Err(crate::error::AppError::Validation(
                format!("Validation failed: {}", validation_errors.join(", "))
            ));
        }

        // Serialize entity to bytes for TAO storage
        // Serialize entity to bytes for TAO storage
        let mut buffer = Vec::new();
        let mut cursor = Cursor::new(&mut buffer);
        let mut protocol = TCompactOutputProtocol::new(&mut cursor);
        entity.write_to_out_protocol(&mut protocol)
            .map_err(|e| crate::error::AppError::SerializationError(e.to_string()))?;
        let data = buffer;

        // Create object using TAO - TAO handles ID generation internally
        let generated_id = tao.obj_add("ent_group".to_string(), data, None).await?;

        // Create final entity with generated ID
        let mut final_entity = entity;
        final_entity.id = generated_id;

        println!("âœ… Created EntGroup with TAO ID: {}", generated_id);

        Ok(final_entity)
    }

}

impl EntGroup {
    /// Create a new entity builder
    pub fn create() -> EntGroupBuilder {
        EntGroupBuilder::new()
    }
}

