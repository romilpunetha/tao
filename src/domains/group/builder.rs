// Generated Unified Builder pattern implementation for EntGroup
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use crate::framework::builder::ent_builder::EntBuilder;
use crate::infrastructure::tao_core::tao_core::TaoEntityBuilder;
use crate::infrastructure::tao_core::tao_core::current_time_millis;
use crate::error::AppResult;
use super::entity::EntGroup;
use crate::infrastructure::global_tao::get_global_tao;

#[derive(Debug, Default)]
pub struct EntGroupBuilderState {
    name: Option<String>,
    description: Option<String>,
    created_time: Option<i64>,
}

impl EntGroupBuilderState {
    pub fn name(mut self, name: String) -> Self {
        self.name = Some(name);
        self
    }

    pub fn description(mut self, description: String) -> Self {
        self.description = Some(description);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    /// Save the entity to database via TAO
    pub async fn savex(self) -> AppResult<EntGroup> {
        let tao = get_global_tao()?.clone();
        tao.create_entity::<EntGroup>(self).await
    }

}

impl EntBuilder for EntGroup {
    type BuilderState = EntGroupBuilderState;

    fn build(state: Self::BuilderState, id: i64) -> Result<Self, String> {
        let current_time = current_time_millis();

        Ok(EntGroup {
            id,
            name: state.name.ok_or_else(|| 
                "Required field 'name' not provided".to_string()
            )?,
            description: state.description,
            created_time: current_time,
        })
    }

    fn entity_type() -> &'static str {
        "ent_group"
    }
}

impl EntGroup {
    /// Create a new entity builder state
    pub fn create() -> EntGroupBuilderState {
        EntGroupBuilderState::default()
    }
}

