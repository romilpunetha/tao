// Autogenerated by Thrift Compiler (0.22.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

pub type TaoId = i64;

pub type TaoTime = i64;

pub type TaoType = String;

pub type AssocType = String;

//
// TaoAssociation
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct TaoAssociation {
  pub id1: TaoId,
  pub atype: AssocType,
  pub id2: TaoId,
  pub time: TaoTime,
  pub data: Option<String>,
}

impl TaoAssociation {
  pub fn new<F5>(id1: TaoId, atype: AssocType, id2: TaoId, time: TaoTime, data: F5) -> TaoAssociation where F5: Into<Option<String>> {
    TaoAssociation {
      id1,
      atype,
      id2,
      time,
      data: data.into(),
    }
  }
}

impl TSerializable for TaoAssociation {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TaoAssociation> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<TaoId> = None;
    let mut f_2: Option<AssocType> = None;
    let mut f_3: Option<TaoId> = None;
    let mut f_4: Option<TaoTime> = None;
    let mut f_5: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i64()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("TaoAssociation.id1", &f_1)?;
    verify_required_field_exists("TaoAssociation.atype", &f_2)?;
    verify_required_field_exists("TaoAssociation.id2", &f_3)?;
    verify_required_field_exists("TaoAssociation.time", &f_4)?;
    let ret = TaoAssociation {
      id1: f_1.expect("auto-generated code should have checked for presence of required fields"),
      atype: f_2.expect("auto-generated code should have checked for presence of required fields"),
      id2: f_3.expect("auto-generated code should have checked for presence of required fields"),
      time: f_4.expect("auto-generated code should have checked for presence of required fields"),
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TaoAssociation");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id1", TType::I64, 1))?;
    o_prot.write_i64(self.id1)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("atype", TType::String, 2))?;
    o_prot.write_string(&self.atype)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id2", TType::I64, 3))?;
    o_prot.write_i64(self.id2)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("time", TType::I64, 4))?;
    o_prot.write_i64(self.time)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::String, 5))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// TaoObject
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct TaoObject {
  pub id: TaoId,
  pub otype: TaoType,
  pub time: TaoTime,
  pub data: Option<String>,
}

impl TaoObject {
  pub fn new<F4>(id: TaoId, otype: TaoType, time: TaoTime, data: F4) -> TaoObject where F4: Into<Option<String>> {
    TaoObject {
      id,
      otype,
      time,
      data: data.into(),
    }
  }
}

impl TSerializable for TaoObject {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TaoObject> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<TaoId> = None;
    let mut f_2: Option<TaoType> = None;
    let mut f_3: Option<TaoTime> = None;
    let mut f_4: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i64()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("TaoObject.id", &f_1)?;
    verify_required_field_exists("TaoObject.otype", &f_2)?;
    verify_required_field_exists("TaoObject.time", &f_3)?;
    let ret = TaoObject {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      otype: f_2.expect("auto-generated code should have checked for presence of required fields"),
      time: f_3.expect("auto-generated code should have checked for presence of required fields"),
      data: f_4,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TaoObject");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("otype", TType::String, 2))?;
    o_prot.write_string(&self.otype)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("time", TType::I64, 3))?;
    o_prot.write_i64(self.time)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// TaoAssocQueryResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct TaoAssocQueryResult {
  pub associations: Vec<TaoAssociation>,
  pub next_cursor: Option<String>,
}

impl TaoAssocQueryResult {
  pub fn new<F2>(associations: Vec<TaoAssociation>, next_cursor: F2) -> TaoAssocQueryResult where F2: Into<Option<String>> {
    TaoAssocQueryResult {
      associations,
      next_cursor: next_cursor.into(),
    }
  }
}

impl TSerializable for TaoAssocQueryResult {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TaoAssocQueryResult> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<Vec<TaoAssociation>> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<TaoAssociation> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = TaoAssociation::read_from_in_protocol(i_prot)?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("TaoAssocQueryResult.associations", &f_1)?;
    let ret = TaoAssocQueryResult {
      associations: f_1.expect("auto-generated code should have checked for presence of required fields"),
      next_cursor: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TaoAssocQueryResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("associations", TType::List, 1))?;
    o_prot.write_list_begin(&TListIdentifier::new(TType::Struct, self.associations.len() as i32))?;
    for e in &self.associations {
      e.write_to_out_protocol(o_prot)?;
    }
    o_prot.write_list_end()?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.next_cursor {
      o_prot.write_field_begin(&TFieldIdentifier::new("next_cursor", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// TaoObjectQueryResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct TaoObjectQueryResult {
  pub objects: Vec<TaoObject>,
  pub next_cursor: Option<String>,
}

impl TaoObjectQueryResult {
  pub fn new<F2>(objects: Vec<TaoObject>, next_cursor: F2) -> TaoObjectQueryResult where F2: Into<Option<String>> {
    TaoObjectQueryResult {
      objects,
      next_cursor: next_cursor.into(),
    }
  }
}

impl TSerializable for TaoObjectQueryResult {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TaoObjectQueryResult> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<Vec<TaoObject>> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<TaoObject> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_1 = TaoObject::read_from_in_protocol(i_prot)?;
            val.push(list_elem_1);
          }
          i_prot.read_list_end()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("TaoObjectQueryResult.objects", &f_1)?;
    let ret = TaoObjectQueryResult {
      objects: f_1.expect("auto-generated code should have checked for presence of required fields"),
      next_cursor: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TaoObjectQueryResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("objects", TType::List, 1))?;
    o_prot.write_list_begin(&TListIdentifier::new(TType::Struct, self.objects.len() as i32))?;
    for e in &self.objects {
      e.write_to_out_protocol(o_prot)?;
    }
    o_prot.write_list_end()?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.next_cursor {
      o_prot.write_field_begin(&TFieldIdentifier::new("next_cursor", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

