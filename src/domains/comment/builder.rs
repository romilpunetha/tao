// Generated Builder pattern implementation for EntComment
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use crate::ent_framework::ent_builder::EntBuilder;
use crate::ent_framework::Entity;
use crate::infrastructure::tao::{current_time_millis, Tao};
use crate::infrastructure::tao_core::TaoOperations;
use crate::error::AppResult;
use super::entity::EntComment;
use thrift::protocol::TSerializable;
use thrift::protocol::TCompactOutputProtocol; // Added for serialization
use std::io::Cursor; // Added for serialization
use crate::infrastructure::global_tao::get_global_tao; // Import global_tao
use async_trait::async_trait;

#[derive(Debug, Default)]
pub struct EntCommentBuilder {
    id: Option<i64>,
    author_id: Option<i64>,
    post_id: Option<i64>,
    content: Option<String>,
    created_time: Option<i64>,
}

impl EntCommentBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn author_id(mut self, author_id: i64) -> Self {
        self.author_id = Some(author_id);
        self
    }

    pub fn post_id(mut self, post_id: i64) -> Self {
        self.post_id = Some(post_id);
        self
    }

    pub fn content(mut self, content: String) -> Self {
        self.content = Some(content);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    /// Build the entity without saving to database
    pub fn build(self, id: i64) -> Result<EntComment, String> {
        let current_time = current_time_millis();

        let entity = EntComment {
            id,
            author_id: self.author_id.ok_or_else(|| 
                "Required field 'author_id' not provided".to_string()
            )?,
            post_id: self.post_id.ok_or_else(|| 
                "Required field 'post_id' not provided".to_string()
            )?,
            content: self.content.ok_or_else(|| 
                "Required field 'content' not provided".to_string()
            )?,
            created_time: current_time,
        };

        Ok(entity)
    }

    /// Save the entity to database via TAO
    pub async fn savex(self) -> AppResult<EntComment> {
        let tao = get_global_tao()?.clone();
        tao.create(self, None).await
    }

}

#[async_trait]
impl EntBuilder for EntCommentBuilder {
    type EntityType = EntComment;

    fn build(self, id: i64) -> Result<Self::EntityType, String> {
        let current_time = current_time_millis();

        let entity = EntComment {
            id,
            author_id: self.author_id.ok_or_else(|| 
                "Required field 'author_id' not provided".to_string()
            )?,
            post_id: self.post_id.ok_or_else(|| 
                "Required field 'post_id' not provided".to_string()
            )?,
            content: self.content.ok_or_else(|| 
                "Required field 'content' not provided".to_string()
            )?,
            created_time: current_time,
        };

        Ok(entity)
    }

    fn entity_type() -> &'static str {
        "ent_comment"
    }
}

impl EntComment {
    /// Create a new entity builder
    pub fn create() -> EntCommentBuilder {
        EntCommentBuilder::new()
    }
}

