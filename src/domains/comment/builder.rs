// Generated Unified Builder pattern implementation for EntComment
// Generated by TAO Ent Framework - DO NOT EDIT
// Regenerate with: cargo run --bin entc generate

use crate::framework::entity::ent_trait::Entity;
use crate::framework::builder::ent_builder::EntBuilder;
use crate::infrastructure::tao_core::tao_core::TaoEntityBuilder;
use crate::infrastructure::tao_core::tao_core::current_time_millis;
use crate::error::AppResult;
use super::entity::EntComment;
use crate::infrastructure::global_tao::get_global_tao;

#[derive(Debug, Default)]
pub struct EntCommentBuilderState {
    author_id: Option<i64>,
    post_id: Option<i64>,
    content: Option<String>,
    created_time: Option<i64>,
}

impl EntCommentBuilderState {
    pub fn author_id(mut self, author_id: i64) -> Self {
        self.author_id = Some(author_id);
        self
    }

    pub fn post_id(mut self, post_id: i64) -> Self {
        self.post_id = Some(post_id);
        self
    }

    pub fn content(mut self, content: String) -> Self {
        self.content = Some(content);
        self
    }

    pub fn created_time(mut self, created_time: i64) -> Self {
        self.created_time = Some(created_time);
        self
    }

    /// Save the entity to database via TAO
    pub async fn savex(self) -> AppResult<EntComment> {
        let tao = get_global_tao()?.clone();
        tao.create_entity::<EntComment>(self).await
    }

}

impl EntBuilder for EntComment {
    type BuilderState = EntCommentBuilderState;

    fn build(state: Self::BuilderState, id: i64) -> Result<Self, String> {
        let current_time = current_time_millis();

        Ok(EntComment {
            id,
            author_id: state.author_id.ok_or_else(|| 
                "Required field 'author_id' not provided".to_string()
            )?,
            post_id: state.post_id.ok_or_else(|| 
                "Required field 'post_id' not provided".to_string()
            )?,
            content: state.content.ok_or_else(|| 
                "Required field 'content' not provided".to_string()
            )?,
            created_time: current_time,
        })
    }

    fn entity_type() -> &'static str {
        "ent_comment"
    }
}

impl EntComment {
    /// Create a new entity builder state
    pub fn create() -> EntCommentBuilderState {
        EntCommentBuilderState::default()
    }
}

